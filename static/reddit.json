{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3il5ai", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "cryp7ix", "media": null, "score": 17, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3il5ai/bootgo_a_barebones_os_kernel/", "name": "t3_3il5ai", "created": 1440704241.0, "url": "https://github.com/jjyr/bootgo", "author_flair_text": null, "quarantine": false, "title": "bootgo - A barebones OS kernel", "created_utc": 1440675441.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 17}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Possibly not the best title as I&amp;#39;m struggling to put what I&amp;#39;m looking for into words. I want to know how I should be structuring the files in my web app project that interact with the database, simple CRUD functions for different entities (e.g. Users, Posts, etc.)&lt;/p&gt;\n\n&lt;p&gt;I read this &lt;a href=\"https://www.reddit.com/r/golang/comments/38hkor/go_best_practice_for_accessing_database_in/\"&gt;post&lt;/a&gt; and a few other articles which have given me some what of a starting point, but I still feel there&amp;#39;s room for improvement. &lt;/p&gt;\n\n&lt;p&gt;I want to use the &lt;a href=\"https://github.com/jinzhu/gorm\"&gt;GORM&lt;/a&gt; ORM library, although I&amp;#39;m open to being convinced otherwise.&lt;/p&gt;\n\n&lt;p&gt;My current pattern is as follows for my repositories package:&lt;/p&gt;\n\n&lt;p&gt;base.go&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package repositories\n\nimport &amp;quot;github.com/jinzhu/gorm&amp;quot;\n\n//Base defines a base respository\ntype Base struct {\n    DB *gorm.DB\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pretty standard... Currently just a struct to be &lt;em&gt;inherited?&lt;/em&gt; by my repositories so they each have a DB field.&lt;/p&gt;\n\n&lt;p&gt;user.go&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package repositories\n\nimport &amp;quot;bitbucket.org/foo/bar/models&amp;quot;\n\n//User defines the user repository\ntype User struct {\n    Base\n}\n\n//ReadID finds a user from the DB with the supplied ID\nfunc (r *User) Read(id uint) *models.User {\n    var user *models.User\n    r.DB.Where(&amp;quot;id = ?&amp;quot;, id).First(&amp;amp;user)\n\n    return user\n}\n\n//ReadAll gets all users\nfunc (r *User) ReadAll() []*models.User {\n    var users []*models.User\n    r.DB.Find(&amp;amp;users)\n\n    return users\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then as you see each repository has the functions you&amp;#39;d expect.&lt;/p&gt;\n\n&lt;p&gt;Obvious issue I have is each repository is gonna have duplicate functions: Read, ReadAll, Create, Remove etc. Is there a way to make this more generic and achieve the same result? &lt;/p&gt;\n\n&lt;p&gt;Any advice on either my current problem or best practice development patterns in general would be greatly appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Possibly not the best title as I'm struggling to put what I'm looking for into words. I want to know how I should be structuring the files in my web app project that interact with the database, simple CRUD functions for different entities (e.g. Users, Posts, etc.)\n\nI read this [post](https://www.reddit.com/r/golang/comments/38hkor/go_best_practice_for_accessing_database_in/) and a few other articles which have given me some what of a starting point, but I still feel there's room for improvement. \n\nI want to use the [GORM](https://github.com/jinzhu/gorm) ORM library, although I'm open to being convinced otherwise.\n\nMy current pattern is as follows for my repositories package:\n\nbase.go\n    \n    package repositories\n            \n    import \"github.com/jinzhu/gorm\"\n    \n    //Base defines a base respository\n    type Base struct {\n        DB *gorm.DB\n    }\n    \nPretty standard... Currently just a struct to be *inherited?* by my repositories so they each have a DB field.\n\nuser.go\n\n    package repositories\n    \n    import \"bitbucket.org/foo/bar/models\"\n    \n    //User defines the user repository\n    type User struct {\n    \tBase\n    }\n    \n    //ReadID finds a user from the DB with the supplied ID\n    func (r *User) Read(id uint) *models.User {\n    \tvar user *models.User\n    \tr.DB.Where(\"id = ?\", id).First(&amp;user)\n    \n    \treturn user\n    }\n    \n    //ReadAll gets all users\n    func (r *User) ReadAll() []*models.User {\n    \tvar users []*models.User\n    \tr.DB.Find(&amp;users)\n    \n    \treturn users\n    }\n    \nThen as you see each repository has the functions you'd expect.\n\nObvious issue I have is each repository is gonna have duplicate functions: Read, ReadAll, Create, Remove etc. Is there a way to make this more generic and achieve the same result? \n\nAny advice on either my current problem or best practice development patterns in general would be greatly appreciated.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ilmn8", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "danhardman", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": true, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3ilmn8/recommended_patterns_for_database_functions/", "name": "t3_3ilmn8", "created": 1440713531.0, "url": "http://www.reddit.com/r/golang/comments/3ilmn8/recommended_patterns_for_database_functions/", "author_flair_text": null, "quarantine": false, "title": "Recommended patterns for database functions", "created_utc": 1440684731.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "c7.se", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ikhgc", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "peterhellberg", "media": null, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ikhgc/go_and_rubyffi/", "name": "t3_3ikhgc", "created": 1440661146.0, "url": "http://c7.se/go-and-ruby-ffi/", "author_flair_text": null, "quarantine": false, "title": "Go and Ruby-FFI", "created_utc": 1440657546.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 7}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Any good writeups/code/presentations/etc. for software design patterns in Go? &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Any good writeups/code/presentations/etc. for software design patterns in Go? ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ilg71", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "sindbis", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 5, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": true, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3ilg71/golang_design_patterns/", "name": "t3_3ilg71", "created": 1440710496.0, "url": "http://www.reddit.com/r/golang/comments/3ilg71/golang_design_patterns/", "author_flair_text": null, "quarantine": false, "title": "Golang Design Patterns", "created_utc": 1440681696.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "jve.linuxwall.info", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ijr51", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jvehent", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 4, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ijr51/hosting_go_code_on_github_with_a_custom_import/", "name": "t3_3ijr51", "created": 1440646294.0, "url": "https://jve.linuxwall.info/blog/index.php?post/2015/08/26/Hosting_Go_code_on_Github_with_custom_import_path", "author_flair_text": null, "quarantine": false, "title": "Hosting Go code on Github with a custom import path", "created_utc": 1440642694.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 6}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ih0r5", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "sbinet", "media": null, "score": 27, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 11, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ih0r5/gopy_automatically_generate_cpython_modules_from/", "name": "t3_3ih0r5", "created": 1440604025.0, "url": "https://github.com/go-python/gopy", "author_flair_text": null, "quarantine": false, "title": "gopy: automatically generate CPython modules from a Go package", "created_utc": 1440600425.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 27}}, {"kind": "t3", "data": {"domain": "medium.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ii26n", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jgautheron", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 1, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ii26n/publish_go_binaries_in_github_with_circleci/", "name": "t3_3ii26n", "created": 1440619491.0, "url": "https://medium.com/@jgautheron/publish-your-golang-binaries-in-github-with-circleci-e0b64cb21bf8", "author_flair_text": null, "quarantine": false, "title": "Publish go binaries in github with circleci", "created_utc": 1440615891.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3igjhd", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "gernest_", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 10, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3igjhd/bongo_elegent_static_website_generation_with_go/", "name": "t3_3igjhd", "created": 1440595672.0, "url": "https://github.com/gernest/bongo", "author_flair_text": null, "quarantine": false, "title": "bongo: Elegent static website generation with Go", "created_utc": 1440592072.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 14}}, {"kind": "t3", "data": {"domain": "getgb.io", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ihimt", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "bketelsen", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ihimt/gb_now_supports_crosscompilation/", "name": "t3_3ihimt", "created": 1440611554.0, "url": "http://getgb.io/news/gb-version-0.1.0-released/", "author_flair_text": null, "quarantine": false, "title": "gb now supports cross-compilation", "created_utc": 1440607954.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 4}}, {"kind": "t3", "data": {"domain": "blog.filippo.io", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ieiiu", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "FiloSottile", "media": null, "score": 58, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 27, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ieiiu/building_python_modules_in_go_thanks_to_15/", "name": "t3_3ieiiu", "created": 1440551546.0, "url": "https://blog.filippo.io/building-python-modules-with-go-1-5/", "author_flair_text": null, "quarantine": false, "title": "Building Python modules in Go thanks to 1.5 c-shared buildmode", "created_utc": 1440547946.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 58}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;With the introduction of the new &lt;a href=\"https://golang.org/cmd/go/#hdr-Description_of_build_modes\"&gt;build modes&lt;/a&gt; shouldn&amp;#39;t it be possible to create some kind of plugin architecture for go programs.&lt;/p&gt;\n\n&lt;p&gt;For example: One main binaries that scans a directory with contain multiple binaries that are loaded during run time and can be called during run time as long as they implement predefinded interfaces?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "With the introduction of the new [build modes](https://golang.org/cmd/go/#hdr-Description_of_build_modes) shouldn't it be possible to create some kind of plugin architecture for go programs.\n\nFor example: One main binaries that scans a directory with contain multiple binaries that are loaded during run time and can be called during run time as long as they implement predefinded interfaces?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3igt35", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "THEHIPP0", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 3, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3igt35/plugin_like_architecture_with_new_buildmodes/", "name": "t3_3igt35", "created": 1440600496.0, "url": "http://www.reddit.com/r/golang/comments/3igt35/plugin_like_architecture_with_new_buildmodes/", "author_flair_text": null, "quarantine": false, "title": "Plugin like architecture with new buildmodes", "created_utc": 1440596896.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 4}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey &lt;a href=\"/r/golang\"&gt;/r/golang&lt;/a&gt;. Over the past few months I&amp;#39;ve been working on a &lt;a href=\"https://github.com/turnage/graw\"&gt;Reddit bot engine in Go&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Currently it&amp;#39;s in pilot; I have some wonderful friends writing a bot or two in it to tell me what they like and dislike about the process so I can iterate on their input.&lt;/p&gt;\n\n&lt;p&gt;I would love to have the input of other gophers! There aren&amp;#39;t many options for writing Reddit bots in Go and I think this has the potential to do a good job addressing that niche. If it interests bot devs in Go, I would like it to be a pleasant introduction to the language.&lt;/p&gt;\n\n&lt;p&gt;Issues, comments, and suggestions appreciated! I don&amp;#39;t have any personal deadline, but I&amp;#39;d like to see a 1.0 in the next month or two. There&amp;#39;s plenty of time to revise.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hey /r/golang. Over the past few months I've been working on a [Reddit bot engine in Go](https://github.com/turnage/graw).\n\nCurrently it's in pilot; I have some wonderful friends writing a bot or two in it to tell me what they like and dislike about the process so I can iterate on their input.\n\nI would love to have the input of other gophers! There aren't many options for writing Reddit bots in Go and I think this has the potential to do a good job addressing that niche. If it interests bot devs in Go, I would like it to be a pleasant introduction to the language.\n\nIssues, comments, and suggestions appreciated! I don't have any personal deadline, but I'd like to see a 1.0 in the next month or two. There's plenty of time to revise.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3if1x5", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "roxven", "media": null, "score": 26, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3if1x5/graw_go_reddit_bot_engine/", "name": "t3_3if1x5", "created": 1440560567.0, "url": "http://www.reddit.com/r/golang/comments/3if1x5/graw_go_reddit_bot_engine/", "author_flair_text": null, "quarantine": false, "title": "graw: Go Reddit bot engine", "created_utc": 1440556967.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 26}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ii7xl", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "olebedev", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 8, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ii7xl/fully_featured_isomorphic_hot/", "name": "t3_3ii7xl", "created": 1440621885.0, "url": "https://github.com/olebedev/go-starter-kit", "author_flair_text": null, "quarantine": false, "title": "Fully featured isomorphic hot reloadable/React/Flummox/css-module starter kit for gophers", "created_utc": 1440618285.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "bitbucket.org", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3if60c", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "weberc2", "media": null, "score": 9, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 4, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3if60c/lazy_lists_in_go/", "name": "t3_3if60c", "created": 1440562478.0, "url": "https://bitbucket.org/weberc2/lazy", "author_flair_text": null, "quarantine": false, "title": "Lazy lists in Go", "created_utc": 1440558878.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 9}}, {"kind": "t3", "data": {"domain": "blog.klauspost.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3igmtn", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "klauspost", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 10, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3igmtn/fast_constant_time_gzipzip_compression_in_go/", "name": "t3_3igmtn", "created": 1440597512.0, "url": "http://blog.klauspost.com/constant-time-gzipzip-compression/", "author_flair_text": null, "quarantine": false, "title": "Fast constant time gzip/zip compression in Go", "created_utc": 1440593912.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "sajari.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ic9am", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "DeedleFake", "media": null, "score": 21, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ic9am/upgrading_sajari_to_go_15/", "name": "t3_3ic9am", "created": 1440518282.0, "url": "https://www.sajari.com/blog/upgrading-sajari-to-go-15", "author_flair_text": null, "quarantine": false, "title": "Upgrading Sajari to Go 1.5", "created_utc": 1440514682.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 21}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is there any type similar to sql.NullString for time.Time? I&amp;#39;m scanning SQLite query results that contain null values in a timestamp column.&lt;/p&gt;\n\n&lt;p&gt;Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Is there any type similar to sql.NullString for time.Time? I'm scanning SQLite query results that contain null values in a timestamp column.\n\nThank you!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ibxdt", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "iltempo", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3ibxdt/null_time_value_in_sql_results/", "name": "t3_3ibxdt", "created": 1440512869.0, "url": "http://www.reddit.com/r/golang/comments/3ibxdt/null_time_value_in_sql_results/", "author_flair_text": null, "quarantine": false, "title": "Null time value in SQL results", "created_utc": 1440509269.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a web app that consists of a web server, back end APIs written in Go, nginx, redis, mongodb, and elasticsearch.&lt;/p&gt;\n\n&lt;p&gt;I want to automate the deployment process to satisfy two goals.  First, to do the initial deployment.  Second, to re-deploy with minimal down time.&lt;/p&gt;\n\n&lt;p&gt;Is anyone willing to share their experiences with different solutions?  Is something like Ansible or Salt more complexity than I need?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have a web app that consists of a web server, back end APIs written in Go, nginx, redis, mongodb, and elasticsearch.\n\nI want to automate the deployment process to satisfy two goals.  First, to do the initial deployment.  Second, to re-deploy with minimal down time.\n\nIs anyone willing to share their experiences with different solutions?  Is something like Ansible or Salt more complexity than I need?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3icmix", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "GoGoGadgetGophers", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3icmix/deployment_what_do_you_use/", "name": "t3_3icmix", "created": 1440523706.0, "url": "http://www.reddit.com/r/golang/comments/3icmix/deployment_what_do_you_use/", "author_flair_text": null, "quarantine": false, "title": "[Deployment] What do you use?", "created_utc": 1440520106.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ibcks", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "farslan", "media": null, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 10, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ibcks/vagrantutil_high_level_wrapper_around_vagrant/", "name": "t3_3ibcks", "created": 1440499844.0, "url": "https://github.com/koding/vagrantutil", "author_flair_text": null, "quarantine": false, "title": "Vagrantutil: high level wrapper around Vagrant", "created_utc": 1440496244.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 7}}, {"kind": "t3", "data": {"domain": "imgur.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ia8k9", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "twek", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 5, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3ia8k9/golang_gopher_shoutout_dell_precision/", "name": "t3_3ia8k9", "created": 1440473868.0, "url": "http://imgur.com/FDIY1vs", "author_flair_text": null, "quarantine": false, "title": "GoLang Gopher shoutout! Dell precision", "created_utc": 1440470268.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 12}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello!&lt;/p&gt;\n\n&lt;p&gt;I have an annoying problem with routing. I have an image storage with random directories generated from a random string and split into multiple pieces. This storage should be outside of my project folder or should be changeable. So I have a route with /img/{id} which returns an html page with an image with the given id. The problem is, that I don&amp;#39;t/can&amp;#39;t (?) render the image into the template. I just render the path into it and therefore the route the page calls should be imgstrg/{path}, which will then return the image itself to use in the html page. Now the page doesn&amp;#39;t just call (localhost:8000)/imgstrg/{path} but rather calls /img/imgstrg/{path} which then (of course) can&amp;#39;t work. If I pass the real path to the html template, it still searches for the file in the /img directory, which is just non-existent.\nHow would I get rid of the /img? Is there any way? It&amp;#39;s really annoying.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello!\n\nI have an annoying problem with routing. I have an image storage with random directories generated from a random string and split into multiple pieces. This storage should be outside of my project folder or should be changeable. So I have a route with /img/{id} which returns an html page with an image with the given id. The problem is, that I don't/can't (?) render the image into the template. I just render the path into it and therefore the route the page calls should be imgstrg/{path}, which will then return the image itself to use in the html page. Now the page doesn't just call (localhost:8000)/imgstrg/{path} but rather calls /img/imgstrg/{path} which then (of course) can't work. If I pass the real path to the html template, it still searches for the file in the /img directory, which is just non-existent.\nHow would I get rid of the /img? Is there any way? It's really annoying.\n\nThanks in advance!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3icapi", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "mko31", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 16, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3icapi/problem_with_routing/", "name": "t3_3icapi", "created": 1440518845.0, "url": "http://www.reddit.com/r/golang/comments/3icapi/problem_with_routing/", "author_flair_text": null, "quarantine": false, "title": "Problem with routing", "created_utc": 1440515245.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 2}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3iaphb", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "hudddb3", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 3, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3iaphb/ekanite_a_syslog_server_written_in_go_with/", "name": "t3_3iaphb", "created": 1440482948.0, "url": "https://github.com/ekanite/ekanite", "author_flair_text": null, "quarantine": false, "title": "Ekanite - a Syslog server written in Go, with built-in search", "created_utc": 1440479348.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The Go documentation explains the difference between exported/unexported functions/methods/fields, but is a little light on recommendations for when to use each.&lt;/p&gt;\n\n&lt;p&gt;Is it right to think of exported methods/functions as the API of your package and unexported methods/functions as basically private helper methods?&lt;/p&gt;\n\n&lt;p&gt;Also, with fields is it right to assume that unexported structs should have unexported fields and exported structs should have exported fields? Are there any other considerations to take into account?&lt;/p&gt;\n\n&lt;p&gt;And is there any performance difference between unexported vs. exported? Is there any downside to exporting everything by default?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The Go documentation explains the difference between exported/unexported functions/methods/fields, but is a little light on recommendations for when to use each.\n\nIs it right to think of exported methods/functions as the API of your package and unexported methods/functions as basically private helper methods?\n\nAlso, with fields is it right to assume that unexported structs should have unexported fields and exported structs should have exported fields? Are there any other considerations to take into account?\n\nAnd is there any performance difference between unexported vs. exported? Is there any downside to exporting everything by default?\n\nThanks!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3ia88a", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "everdev", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 4, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3ia88a/exported_unexported_best_practices/", "name": "t3_3ia88a", "created": 1440473716.0, "url": "http://www.reddit.com/r/golang/comments/3ia88a/exported_unexported_best_practices/", "author_flair_text": null, "quarantine": false, "title": "Exported / Unexported best practices?", "created_utc": 1440470116.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 6}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey &lt;a href=\"/r/golang\"&gt;/r/golang&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been experimenting a lot with event sourcing, explaining the concept to people and building small applications using this approach.   After many iterations I&amp;#39;ve finally settled on a way of doing things and cast that into code. &lt;/p&gt;\n\n&lt;p&gt;You can find the &lt;a href=\"https://github.com/dhamidi/ess\"&gt;code here&lt;/a&gt; and the &lt;a href=\"http://godoc.org/github.com/dhamidi/ess\"&gt;documentation here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The main criticism of event sourcing seems to be that it is &amp;quot;complex&amp;quot;.  My experience is that it is just a different, unfamiliar kind of complexity.  The underlying principles are simple.&lt;/p&gt;\n\n&lt;p&gt;What I&amp;#39;m looking for is some feedback on the &lt;a href=\"http://godoc.org/github.com/dhamidi/ess\"&gt;documentation&lt;/a&gt;, especially the &lt;a href=\"http://godoc.org/github.com/dhamidi/ess#hdr-Tutorial\"&gt;tutorial part&lt;/a&gt;, as to whether it reads well and gets the point across.&lt;/p&gt;\n\n&lt;p&gt;Also, if anyone has experience with event sourcing, I&amp;#39;d be glad to hear about them.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hey /r/golang,\n\nI've been experimenting a lot with event sourcing, explaining the concept to people and building small applications using this approach.   After many iterations I've finally settled on a way of doing things and cast that into code. \n\nYou can find the [code here](https://github.com/dhamidi/ess) and the [documentation here](http://godoc.org/github.com/dhamidi/ess).\n\nThe main criticism of event sourcing seems to be that it is \"complex\".  My experience is that it is just a different, unfamiliar kind of complexity.  The underlying principles are simple.\n\nWhat I'm looking for is some feedback on the [documentation](http://godoc.org/github.com/dhamidi/ess), especially the [tutorial part](http://godoc.org/github.com/dhamidi/ess#hdr-Tutorial), as to whether it reads well and gets the point across.\n\nAlso, if anyone has experience with event sourcing, I'd be glad to hear about them.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3i7kgx", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "farmingyaks", "media": null, "score": 25, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 17, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3i7kgx/library_for_building_event_sourced_systems_in_go/", "name": "t3_3i7kgx", "created": 1440432783.0, "url": "http://www.reddit.com/r/golang/comments/3i7kgx/library_for_building_event_sourced_systems_in_go/", "author_flair_text": null, "quarantine": false, "title": "Library for building event sourced systems in Go", "created_utc": 1440429183.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 25}}, {"kind": "t3", "data": {"domain": "medium.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3iamf3", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "IndianGuru", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 7, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3iamf3/the_business_benefits_of_building_your_next/", "name": "t3_3iamf3", "created": 1440480946.0, "url": "https://medium.com/@shift8creative/the-business-benefits-of-building-your-next-project-with-go-ebed4bbc3ed7", "author_flair_text": null, "quarantine": false, "title": "The Business Benefits of Building Your Next Project With Go", "created_utc": 1440477346.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 2}}], "after": "t3_3iamf3", "before": null}}